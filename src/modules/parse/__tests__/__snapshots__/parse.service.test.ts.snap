// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ParseService mozilla-readability 1`] = `
{
  "byline": "Vadim Kravcenko",
  "content": "<div id="readability-page-1" class="page"><div id="content">
                                    
                                    <p>
                                        I‚Äôm sure you‚Äôve worked at companies where you felt that they were moving slowly and it was not even worth putting your best in, and I‚Äôm also sure you‚Äôve worked at companies where you felt excited about contributing to the product development. But what separates the former from the latter? The answer is <s>technical</s>
                                        process debt.
                                    </p>
                                    <p>
                                        <a href="https://www.mn.uio.no/ifi/english/people/aca/antonima/papers/Process_Debt_APSEC.pdf" rel="nofollow">Process debt</a>
                                        is the accumulation of inefficient, outdated, or redundant processes within an organization. It manifests as cumbersome workflows, leading to increased developer frustration and the feeling of ‚Äúthis seems wrong‚Äù when you look at how things are done. Similar to <a href="https://vadimkravcenko.com/en/manage-technical-debt-agile-company/" title="Managing technical debt at an agile company">technical debt</a>
                                        , this kind of debt subtly erodes the operational efficiency of a company, often going unnoticed until it significantly hampers progress.
                                    </p>
                                    <figure>
                                        <img alt="" data-src="https://vadimkravcenko.com/wp-content/uploads/2023/12/image-1.png" src="https://vadimkravcenko.com/wp-content/uploads/2023/12/image-1.png">
                                    </figure>
                                    <p>
                                        I also sometimes call this ‚Äúprocesses for the sake of processes‚Äù ‚Äî it‚Äôs when a startup lacks focus and starts hiring new people because:<br>
                                        <em>
                                            a) either the investors are pushing for growth or<br>b) they‚Äôre just throwing people at the problem, hoping it will fix everything.
                                        </em>
                                        <br>This eventually leads to processes getting jumbled and new work invented to accommodate new hires.
                                    </p>
                                    <p>The Best Process is No Process ‚Äî the holy grail of maximum efficiency. The only issue with that statement is that you cannot scale without having any processes. So, if you‚Äôre a startup of 1 person ‚Äî you encompass everything in your mind and can do everything without friction. But your mental capacity has a limit. You won‚Äôt be able to grow endlessly. </p>
                                    <p>There‚Äôs only so much you can do in a day and only so many things you can keep in your short-term memory. Once you cross the point of having too many things to do, either your mental health suffers, your quality of work, or both. This is where you‚Äôll need to start hiring new developers and defining what and how they should work, a.k.a defining the processes.</p>
                                    <p>
                                        In 1968, Melvin Conway said: ‚Äú<em>Organizations which design systems ‚Ä¶ are constrained to produce designs which are copies of the communication structures of these organizations</em>
                                        ". So, assuming you‚Äôre a solo developer or a <a href="https://vadimkravcenko.com/technical-manager-guide/" title="Technical Manager Guide 2022">technical co-founder</a>
                                        , your system designs will be a copy of perfection, as you understand the complexities of the product best and can also develop it. According to Conway's Law, your organizational process complexity will trickle down into the product you create; the more you grow, the worse your processes get, and the worse your product becomes.
                                    </p>
                                    <figure>
                                        <img alt="" data-src="https://vadimkravcenko.com/wp-content/uploads/2023/12/image-2-1024x901.png" src="https://vadimkravcenko.com/wp-content/uploads/2023/12/image-2-1024x901.png">
                                    </figure>
                                    <p>An excellent example of process debt is when the Sales Team has a fantastic CRM Tool but still relies on Excel + Phone + Pen and Paper to track leads and make sales ‚Äúbecause that worked for them all these years.‚Äù Someone was hired at one point, established some ‚Äúgood enough‚Äù process, and then the next hire came in and adopted the same approach. </p>
                                    <p>But it can get worse. The new hire could‚Äôve started doing it differently. And then you have multiple employees doing things in many different ways, and if we extrapolate this over the years ‚Äî this will become a Frankenstein‚Äôs Monster that will be hard to untangle.</p>
                                    <pre>üèÑ The Best Process Is No Process. Unless you're more than 1 person in a team.</pre>
                                    <p>Technical debt, as well as process debt, is inevitable. Once you hire more and more people, you place yourself on the path to process debt. Every link you add to the operational chain is a) extra capacity that allows you to grow and be profitable and b) an increase in human process latency. More people = more discussion = more meetings. As we know from software engineering, the more hops a network request does, the higher the latency.</p>
                                    <p>While technical debt refers to the future costs and complications arising from quick, suboptimal coding decisions made under pressure, process debt pertains to the organizational and workflow inefficiencies that accumulate over time. Slowly. They‚Äôre not immediate. It‚Äôs even hard to pinpoint where the organizational debt started. Both forms of debt share a common trait: they represent a deferred cost or problem that will need addressing later, usually at a higher expense.</p>
                                    <p>I want to emphasize that EVERY company has processed debts. Over time, it escalates from minor irritations to significant roadblocks as a company scales. That‚Äôs why there‚Äôs a constant battle in every organization to make sure the processes stay on track.</p>
                                    <h2 id="h-bloated-processes">Bloated Processes</h2>
                                    <p>
                                        If there‚Äôs a manual deployment - that‚Äôs technical debt. If there‚Äôs a feature development workflow where one person fills out a change request form in an intranet tool, then sends that out per email to another coworker, who prints it out, signs it, and then inputs the data manually into another tool before giving the paper to some other person to sign ‚Äî that‚Äôs <s>compliance</s>
                                        process debt.
                                    </p>
                                    <p>Let‚Äôs make this relatable to all the software developers. Have you ever been stuck in traffic? That's what dealing with bloated processes in software engineering feels like. You know where you need to go, but you're just not moving. You‚Äôre eager, you want to be moving, like on the autobahn in Germany. But you‚Äôre not. It's the endless meetings that seem to discuss more meetings. It's the convoluted approval process where a simple task requires the digital equivalent of a royal decree.</p>
                                    <p>Then you've got your classic over-engineered code review process, where every line of code is scrutinized by multiple people like it's a matter of national security. (It might be, but probably isn‚Äôt) It's a circus of back-and-forth, endless meetings, and bureaucratic hoops that turn what should be a sprint into a never-ending relay race.</p>
                                    <p>Then there's the deployment process, layered with so many checks and approvals that you‚Äôre practically ready to retire by the time you push something to production. Let's not forget the "agile" stand-ups that have morphed into drawn-out sit-downs, where the coffee gets cold as everyone drones on about what they did yesterday. I have a theory that all these things start as good ideas. They just become bloated and bureaucratic over time.</p>
                                    <p>Then there's the classic: documentation for the sake of documentation. Pages upon pages of reports that nobody reads but everyone insists are essential. It's like building a skyscraper for a lemonade stand. These processes lead to delays, sap productivity, and create a general sense of trudging through mud.</p>
                                    <pre>üèÑ I‚Äôm sure while reading this, you remembered some of your examples of bloated processes that you had to deal with over the years.</pre>
                                    <p>These processes grow so complex and intertwined over time that you need a map, compass, and a local guide to get through them. They've lost sight of their original purpose ‚Äì to streamline work ‚Äì and have become self-serving.</p>
                                    <h2 id="h-growth-duality">Growth duality</h2>
                                    <p>As you remember, I mentioned above ‚Äî hiring people before finding work for those people is not optimal. That‚Äôs not bad per se. You just need to be careful not to fall into the trap of inventing unnecessary processes for those people. Hiring people before really knowing what they‚Äôre going to be doing is one of the problems you will have to solve in a growing startup.</p>
                                    <p>So, imagine you‚Äôre a technical co-founder, and you‚Äôre growing super fast. Essentially, your job is to figure out what you don‚Äôt know, and you do that by hiring people who are way smarter than you and can help you figure it out. The goal of such ‚Äúabstract‚Äù hires is to give you clarity and focus and then, hopefully, help you figure out where you currently lack efficiency as a company and find people to fill those roles.</p>
                                    <p>Scaling a software team is like upgrading from a family sedan to a bus. You can't steer it the same way. Processes that worked for you when you were a tight-knit group of 3 are a disaster at 50. You‚Äôre growing from a scrappy bunch of rebels to a structured battalion ‚Äî you need to think differently. What used to be quick decisions in a chat now require a formal meeting and maybe even a follow-up email to clarify everything discussed so everyone is on the same page.</p>
                                    <pre>üèÑ You see the irony, right? Processes meant to keep us on track end up derailing us. You can‚Äôt have a group chat of 100 people making decisions left and right. That lean methodology we all loved suddenly becomes this bloated beast that no one knows how to tame.</pre>
                                    <p>As a startup, our biggest asset is agility ‚Äì our ability to pivot faster than a caffeinated ballerina. But that comes at the cost of failure, non-compliance, and other nasty things. Startups can allow themselves to make mistakes. The more you grow, the more costly those mistakes get. The solution is the formalized, strict, rigid processes that get set up. But even if complicated processes are a must, things get disproportionally bad as middle management comes into play.</p>
                                    <p>
                                        Middle management plays a pivotal role in either mitigating or exacerbating process debt. Their decisions impact how processes are implemented and adhered to within teams. Effective middle management keeps things flowing. Poor middle management can destroy companies; it‚Äôs called death by middle management, and <a href="https://knowledge.insead.edu/strategy/who-killed-nokia-nokia-did">Nokia is a good example.</a>
                                    </p>
                                    <h2 id="h-growing-too-fast">Growing too fast</h2>
                                    <p>Here are the things you should remember whenever you‚Äôre growing too fast.</p>
                                    <p>Focusing on way too many things at the same time. So much multitasking that nothing moves. You might think it‚Äôs good and allows you to do more, but it hinders the business if everyone is doing everything. Just as individuals struggle to juggle disparate tasks simultaneously, a fast-growing business attempting to handle everything at once risks inefficiency and lost focus. The mirage of accomplishing more masks the reality ‚Äì a chaotic, stressed atmosphere where not much was accomplished. It‚Äôs similar to ‚Äúdoing work‚Äù vs. ‚Äúacting busy.‚Äù Multitasking, in this case, is ‚Äúacting busy.‚Äù</p>
                                    <figure>
                                        <img alt="" data-src="https://vadimkravcenko.com/wp-content/uploads/2023/12/image-941x1024.png" src="https://vadimkravcenko.com/wp-content/uploads/2023/12/image-941x1024.png">
                                        <figcaption>Great representation of tech debt, but also relates to building processes over time</figcaption>
                                    </figure>
                                    <p>
                                        The next bad thing that can make or break your fast growth is <strong>inadequate onboarding </strong>
                                        for new hires. As discussed, rapid hiring can lead to insufficient onboarding, leaving new employees unclear about their roles and company culture. Rapid growth also means roles are not clearly defined ‚Äî there might be overlaps or gaps in <a href="https://vadimkravcenko.com/shorts/what-cto-does/" title="What does a CTO actually do?">responsibilities</a>
                                        , making everything more confusing. If you don‚Äôt give people clarity, they will create it for themselves, and it probably will not match what you want for the company.
                                    </p>
                                    <p>
                                        The next thing you should forget ‚Äî is <strong>over-reliance on informal communication</strong>
                                        : Chatting up in Whatsapp and making decisions on the fly is a thing of the past. More people = more need for clarity. I agree that it worked wonders for you and your cofounder when building the MVP. Still, as you scale, reliance on informal communication channels becomes unsustainable, leading to miscommunications and wrong things being built.
                                    </p>
                                    <p>
                                        As a CTO, you want every team to work similarly, using the same IDEs and development workflows. Why? Without <strong>standardized processes</strong>
                                        , different teams develop their own ways of working ‚Äî different linters, deployment scripts, and DevOps tools‚Äîwhich brings chaos. This is process debt, not technical debt, as working in the same, standardized way is a management problem, not a coding one.
                                    </p>
                                    <p>
                                        You should also focus on reducing your <a href="https://en.wikipedia.org/wiki/Bus_factor" rel="nofollow">bus factor</a>
                                        . Startups often neglect to develop strong middle management, which becomes a bottleneck as the organization grows. You cannot make all the decisions alone. Stuff needs to happen without you looking over people‚Äôs shoulders. And you do that by building your own middle management that can make decisions autonomously.
                                    </p>
                                    <p>
                                        Start striving for a good <strong>work-life balance</strong>
                                        culture that you read so much about. The fast-paced environment of a growing startup often leads to employee burnout, which is also in itself a process debt. Flawed processes lead to people doing unnecessary and unfulfilling work. You have the power to reduce that.
                                    </p>
                                    <h2 id="h-being-too-corporate">Being too corporate</h2>
                                    <p>On the other side of the spectrum are things to keep an eye out for when you‚Äôve joined an established company founded in the 90‚Äôs.</p>
                                    <p>
                                        It‚Äôs time to dive deep into why things happen the way they do. There‚Äôs highly likely <strong>excessive bureaucracy</strong>
                                        happening all around you. Too many layers of approval slowing down decision-making. A tool for control that eventually became a tool of frustration and leverage. Mapping out the current status quo and understanding the why behind the workflow is the first step to figuring out how to simplify it.
                                    </p>
                                    <p>
                                        Moving away from <strong>synchronous to asynchronous</strong>
                                        . This is a process debt that I personally don‚Äôt like ‚Äî the over-reliance on meetings. I think this highly correlates with the ‚Äúacting busy‚Äù debt. What could‚Äôve been an email with several people in CC gets promoted to a 30-minute monologue to fill in the working time ‚Äî an extra meeting with no inherent value.
                                    </p>
                                    <figure>
                                        <img alt="" data-src="https://vadimkravcenko.com/wp-content/uploads/2023/12/image-4-1024x731.png" src="https://vadimkravcenko.com/wp-content/uploads/2023/12/image-4-1024x731.png">
                                    </figure>
                                    <p>
                                        One of the blockers that you will encounter when investigating organizational debts is <strong>legacy systems</strong>
                                        . The tools have grown over time to adapt to the processes, and not vice versa. Organizations often resist updating these systems due to a) cost concerns and b) change resistance. When people get used to doing things one way, it‚Äôs tough to convince them to switch, even if you prove it will be twice as efficient.
                                    </p>
                                    <p>
                                        <strong>Informational Silos in the company.</strong>
                                        This usually happens when teams operate in isolation and don‚Äôt talk across departments. This isolation can lead to double work, miscommunication, and missed opportunities. I once saw a situation where because of misalignment and silos, two separate teams built the same product independently. That was a fun meeting to be in. Breaking down these silos is essential to making sure everyone at the company moves in the same direction.
                                    </p>
                                    <p>
                                        The next one usually arises from companies with a culture emphasizing blaming when something goes wrong. And what happens when people are afraid to make mistakes? You guessed it, bad things get swept under the rug. This is the <a href="https://thedecisionlab.com/biases/ostrich-effect" rel="nofollow">Ostrich Problem.</a>
                                    </p>
                                    <p>
                                        I once found myself working on a project where we definitely were not going to hit our deadlines. I was invited as the tech lead to a meeting with my manager and the C-Level representatives. Before the meeting, my manager told me to lie that we were on track; otherwise, it would look bad for him that we were not meeting our target <a href="https://vadimkravcenko.com/shorts/project-estimates/" title="Rules of Thumb for Software Development Estimations">estimates</a>
                                        . During the conversation, when one of the executives asked me point-blank about the likelihood of us not hitting the deadlines ‚Äî I told him straight that this was definitely a possibility and we should already start making arrangements for this scenario. After the meeting, my direct manager was fuming that I made him look bad, as if ‚Äúwe couldn‚Äôt deliver.‚Äù It was important for him to seem successful to the management rather than dealing with the realities of us missing the target and working transparently.
                                    </p>
                                    <pre>üèÑ This dance with delusion is not limited to middle management. It can get as bad as the whole company leadership being afraid of showing how bad things really are and spinning up lies to seem successful to the board and investors, but that‚Äôs called fraud.</pre>
                                    <p>Last but not least, established companies = comfy jobs = no desire to change the status quo = no innovation. Employees who WANT to disrupt the internal status quo get pushed down or pushed out. This aversion to change, coupled with resistance to disrupt the status quo, creates organizational debt. When employees are not given the possibility to influence their processes and the autonomy to make decisions ‚Äî they leave. Only those accepting the status quo remain, resulting in a bundle of ‚Äúcomfy‚Äù ineffective processes.</p>
                                    <h2 id="h-conclusion">Conclusion</h2>
                                    <p>So here we are. The goal of this essay was to showcase that not only IT suffers from technical debt, but also the management suffers from organizational debt. Engineers' resistance to nonsensical processes highlights the need for transparent and well-communicated workflows. Leaders, such as yourself, must focus on refining and effectively communicating these processes to ensure they add value first and are comprehensible second, not vice versa. As a technical manager or a CTO, you‚Äôll have to work with other C-level executives to ensure the direction is clear and the processes make sense.</p>
                                    <p>Just as code requires refactoring, organizational structures and workflows also need regular evaluation and adjustment to maintain efficiency. </p>
                                    <p>
                                        Other <a href="https://vadimkravcenko.com/newsletter/">Newsletter</a>
                                        Issues:
                                    </p>
                                    <ul>
                                        <li>
                                            <a href="https://vadimkravcenko.com/shorts/habits-of-great-software-engineers/">Habits of great software engineers</a>
                                        </li>
                                        <li>
                                            <a href="https://vadimkravcenko.com/shorts/networking-introvert-cto/">Networking as an introvert CTO</a>
                                        </li>
                                        <li>
                                            <a href="https://vadimkravcenko.com/shorts/database-migrations/">Database Migrations</a>
                                        </li>
                                        <li>
                                            <a href="https://vadimkravcenko.com/shorts/proper-documentation/">Proper Documentation</a>
                                        </li>
                                    </ul>
                                    <div>
                                        <h3>Reactions</h3>
                                        
                                        <div>
                                            <p><span>Hot!</span>
                                            The last couple of years I've been writing about CTO / Tech lead job. I've compiled all my knowledge into a printable PDF. I called it <a href="/technical-manager-guide/" data-analytics="&quot;CTOGuideButton&quot;, {&quot;props&quot;:{&quot;page&quot;:&quot;single&quot;}}">"196 Pages of No Bullshit Guide for CTOs"</a>
                                            . So if you're interested, take a look.
</p><p>
                                            
                                            <span>New!</span>
                                            If you're a software engineer looking for a job, I started a <a href="/roast-my-resume/" data-analytics="&quot;RoastMyResume&quot;, {&quot;props&quot;:{&quot;page&quot;:&quot;single&quot;}}">Roast my Resume</a>
                                            service, where I record a personalized video of me "roasting" your CV, which basically means taking a hard look at your resume as a CTO and commenting on all the good and the bad parts.

                                        </p></div>
                                    </div>
                                </div></div>",
  "dir": null,
  "excerpt": "I‚Äôm sure you‚Äôve worked at companies where you felt that they were moving slowly and it was not even worth putting your best in, and I‚Äôm also sure you‚Äôve",
  "lang": "en-US",
  "length": 22521,
  "publishedTime": "2023-12-10T16:25:34+00:00",
  "siteName": "Vadim Kravcenko",
  "textContent": "
                                    
                                    
                                        I‚Äôm sure you‚Äôve worked at companies where you felt that they were moving slowly and it was not even worth putting your best in, and I‚Äôm also sure you‚Äôve worked at companies where you felt excited about contributing to the product development. But what separates the former from the latter? The answer is technical
                                        process debt.
                                    
                                    
                                        Process debt
                                        is the accumulation of inefficient, outdated, or redundant processes within an organization. It manifests as cumbersome workflows, leading to increased developer frustration and the feeling of ‚Äúthis seems wrong‚Äù when you look at how things are done. Similar to technical debt
                                        , this kind of debt subtly erodes the operational efficiency of a company, often going unnoticed until it significantly hampers progress.
                                    
                                    
                                        
                                    
                                    
                                        I also sometimes call this ‚Äúprocesses for the sake of processes‚Äù ‚Äî it‚Äôs when a startup lacks focus and starts hiring new people because:
                                        
                                            a) either the investors are pushing for growth orb) they‚Äôre just throwing people at the problem, hoping it will fix everything.
                                        
                                        This eventually leads to processes getting jumbled and new work invented to accommodate new hires.
                                    
                                    The Best Process is No Process ‚Äî the holy grail of maximum efficiency. The only issue with that statement is that you cannot scale without having any processes. So, if you‚Äôre a startup of 1 person ‚Äî you encompass everything in your mind and can do everything without friction. But your mental capacity has a limit. You won‚Äôt be able to grow endlessly. 
                                    There‚Äôs only so much you can do in a day and only so many things you can keep in your short-term memory. Once you cross the point of having too many things to do, either your mental health suffers, your quality of work, or both. This is where you‚Äôll need to start hiring new developers and defining what and how they should work, a.k.a defining the processes.
                                    
                                        In 1968, Melvin Conway said: ‚ÄúOrganizations which design systems ‚Ä¶ are constrained to produce designs which are copies of the communication structures of these organizations
                                        ". So, assuming you‚Äôre a solo developer or a technical co-founder
                                        , your system designs will be a copy of perfection, as you understand the complexities of the product best and can also develop it. According to Conway's Law, your organizational process complexity will trickle down into the product you create; the more you grow, the worse your processes get, and the worse your product becomes.
                                    
                                    
                                        
                                    
                                    An excellent example of process debt is when the Sales Team has a fantastic CRM Tool but still relies on Excel + Phone + Pen and Paper to track leads and make sales ‚Äúbecause that worked for them all these years.‚Äù Someone was hired at one point, established some ‚Äúgood enough‚Äù process, and then the next hire came in and adopted the same approach. 
                                    But it can get worse. The new hire could‚Äôve started doing it differently. And then you have multiple employees doing things in many different ways, and if we extrapolate this over the years ‚Äî this will become a Frankenstein‚Äôs Monster that will be hard to untangle.
                                    üèÑ The Best Process Is No Process. Unless you're more than 1 person in a team.
                                    Technical debt, as well as process debt, is inevitable. Once you hire more and more people, you place yourself on the path to process debt. Every link you add to the operational chain is a) extra capacity that allows you to grow and be profitable and b) an increase in human process latency. More people = more discussion = more meetings. As we know from software engineering, the more hops a network request does, the higher the latency.
                                    While technical debt refers to the future costs and complications arising from quick, suboptimal coding decisions made under pressure, process debt pertains to the organizational and workflow inefficiencies that accumulate over time. Slowly. They‚Äôre not immediate. It‚Äôs even hard to pinpoint where the organizational debt started. Both forms of debt share a common trait: they represent a deferred cost or problem that will need addressing later, usually at a higher expense.
                                    I want to emphasize that EVERY company has processed debts. Over time, it escalates from minor irritations to significant roadblocks as a company scales. That‚Äôs why there‚Äôs a constant battle in every organization to make sure the processes stay on track.
                                    Bloated Processes
                                    
                                        If there‚Äôs a manual deployment - that‚Äôs technical debt. If there‚Äôs a feature development workflow where one person fills out a change request form in an intranet tool, then sends that out per email to another coworker, who prints it out, signs it, and then inputs the data manually into another tool before giving the paper to some other person to sign ‚Äî that‚Äôs compliance
                                        process debt.
                                    
                                    Let‚Äôs make this relatable to all the software developers. Have you ever been stuck in traffic? That's what dealing with bloated processes in software engineering feels like. You know where you need to go, but you're just not moving. You‚Äôre eager, you want to be moving, like on the autobahn in Germany. But you‚Äôre not. It's the endless meetings that seem to discuss more meetings. It's the convoluted approval process where a simple task requires the digital equivalent of a royal decree.
                                    Then you've got your classic over-engineered code review process, where every line of code is scrutinized by multiple people like it's a matter of national security. (It might be, but probably isn‚Äôt) It's a circus of back-and-forth, endless meetings, and bureaucratic hoops that turn what should be a sprint into a never-ending relay race.
                                    Then there's the deployment process, layered with so many checks and approvals that you‚Äôre practically ready to retire by the time you push something to production. Let's not forget the "agile" stand-ups that have morphed into drawn-out sit-downs, where the coffee gets cold as everyone drones on about what they did yesterday. I have a theory that all these things start as good ideas. They just become bloated and bureaucratic over time.
                                    Then there's the classic: documentation for the sake of documentation. Pages upon pages of reports that nobody reads but everyone insists are essential. It's like building a skyscraper for a lemonade stand. These processes lead to delays, sap productivity, and create a general sense of trudging through mud.
                                    üèÑ I‚Äôm sure while reading this, you remembered some of your examples of bloated processes that you had to deal with over the years.
                                    These processes grow so complex and intertwined over time that you need a map, compass, and a local guide to get through them. They've lost sight of their original purpose ‚Äì to streamline work ‚Äì and have become self-serving.
                                    Growth duality
                                    As you remember, I mentioned above ‚Äî hiring people before finding work for those people is not optimal. That‚Äôs not bad per se. You just need to be careful not to fall into the trap of inventing unnecessary processes for those people. Hiring people before really knowing what they‚Äôre going to be doing is one of the problems you will have to solve in a growing startup.
                                    So, imagine you‚Äôre a technical co-founder, and you‚Äôre growing super fast. Essentially, your job is to figure out what you don‚Äôt know, and you do that by hiring people who are way smarter than you and can help you figure it out. The goal of such ‚Äúabstract‚Äù hires is to give you clarity and focus and then, hopefully, help you figure out where you currently lack efficiency as a company and find people to fill those roles.
                                    Scaling a software team is like upgrading from a family sedan to a bus. You can't steer it the same way. Processes that worked for you when you were a tight-knit group of 3 are a disaster at 50. You‚Äôre growing from a scrappy bunch of rebels to a structured battalion ‚Äî you need to think differently. What used to be quick decisions in a chat now require a formal meeting and maybe even a follow-up email to clarify everything discussed so everyone is on the same page.
                                    üèÑ You see the irony, right? Processes meant to keep us on track end up derailing us. You can‚Äôt have a group chat of 100 people making decisions left and right. That lean methodology we all loved suddenly becomes this bloated beast that no one knows how to tame.
                                    As a startup, our biggest asset is agility ‚Äì our ability to pivot faster than a caffeinated ballerina. But that comes at the cost of failure, non-compliance, and other nasty things. Startups can allow themselves to make mistakes. The more you grow, the more costly those mistakes get. The solution is the formalized, strict, rigid processes that get set up. But even if complicated processes are a must, things get disproportionally bad as middle management comes into play.
                                    
                                        Middle management plays a pivotal role in either mitigating or exacerbating process debt. Their decisions impact how processes are implemented and adhered to within teams. Effective middle management keeps things flowing. Poor middle management can destroy companies; it‚Äôs called death by middle management, and Nokia is a good example.
                                    
                                    Growing too fast
                                    Here are the things you should remember whenever you‚Äôre growing too fast.
                                    Focusing on way too many things at the same time. So much multitasking that nothing moves. You might think it‚Äôs good and allows you to do more, but it hinders the business if everyone is doing everything. Just as individuals struggle to juggle disparate tasks simultaneously, a fast-growing business attempting to handle everything at once risks inefficiency and lost focus. The mirage of accomplishing more masks the reality ‚Äì a chaotic, stressed atmosphere where not much was accomplished. It‚Äôs similar to ‚Äúdoing work‚Äù vs. ‚Äúacting busy.‚Äù Multitasking, in this case, is ‚Äúacting busy.‚Äù
                                    
                                        
                                        Great representation of tech debt, but also relates to building processes over time
                                    
                                    
                                        The next bad thing that can make or break your fast growth is inadequate onboarding 
                                        for new hires. As discussed, rapid hiring can lead to insufficient onboarding, leaving new employees unclear about their roles and company culture. Rapid growth also means roles are not clearly defined ‚Äî there might be overlaps or gaps in responsibilities
                                        , making everything more confusing. If you don‚Äôt give people clarity, they will create it for themselves, and it probably will not match what you want for the company.
                                    
                                    
                                        The next thing you should forget ‚Äî is over-reliance on informal communication
                                        : Chatting up in Whatsapp and making decisions on the fly is a thing of the past. More people = more need for clarity. I agree that it worked wonders for you and your cofounder when building the MVP. Still, as you scale, reliance on informal communication channels becomes unsustainable, leading to miscommunications and wrong things being built.
                                    
                                    
                                        As a CTO, you want every team to work similarly, using the same IDEs and development workflows. Why? Without standardized processes
                                        , different teams develop their own ways of working ‚Äî different linters, deployment scripts, and DevOps tools‚Äîwhich brings chaos. This is process debt, not technical debt, as working in the same, standardized way is a management problem, not a coding one.
                                    
                                    
                                        You should also focus on reducing your bus factor
                                        . Startups often neglect to develop strong middle management, which becomes a bottleneck as the organization grows. You cannot make all the decisions alone. Stuff needs to happen without you looking over people‚Äôs shoulders. And you do that by building your own middle management that can make decisions autonomously.
                                    
                                    
                                        Start striving for a good work-life balance
                                        culture that you read so much about. The fast-paced environment of a growing startup often leads to employee burnout, which is also in itself a process debt. Flawed processes lead to people doing unnecessary and unfulfilling work. You have the power to reduce that.
                                    
                                    Being too corporate
                                    On the other side of the spectrum are things to keep an eye out for when you‚Äôve joined an established company founded in the 90‚Äôs.
                                    
                                        It‚Äôs time to dive deep into why things happen the way they do. There‚Äôs highly likely excessive bureaucracy
                                        happening all around you. Too many layers of approval slowing down decision-making. A tool for control that eventually became a tool of frustration and leverage. Mapping out the current status quo and understanding the why behind the workflow is the first step to figuring out how to simplify it.
                                    
                                    
                                        Moving away from synchronous to asynchronous
                                        . This is a process debt that I personally don‚Äôt like ‚Äî the over-reliance on meetings. I think this highly correlates with the ‚Äúacting busy‚Äù debt. What could‚Äôve been an email with several people in CC gets promoted to a 30-minute monologue to fill in the working time ‚Äî an extra meeting with no inherent value.
                                    
                                    
                                        
                                    
                                    
                                        One of the blockers that you will encounter when investigating organizational debts is legacy systems
                                        . The tools have grown over time to adapt to the processes, and not vice versa. Organizations often resist updating these systems due to a) cost concerns and b) change resistance. When people get used to doing things one way, it‚Äôs tough to convince them to switch, even if you prove it will be twice as efficient.
                                    
                                    
                                        Informational Silos in the company.
                                        This usually happens when teams operate in isolation and don‚Äôt talk across departments. This isolation can lead to double work, miscommunication, and missed opportunities. I once saw a situation where because of misalignment and silos, two separate teams built the same product independently. That was a fun meeting to be in. Breaking down these silos is essential to making sure everyone at the company moves in the same direction.
                                    
                                    
                                        The next one usually arises from companies with a culture emphasizing blaming when something goes wrong. And what happens when people are afraid to make mistakes? You guessed it, bad things get swept under the rug. This is the Ostrich Problem.
                                    
                                    
                                        I once found myself working on a project where we definitely were not going to hit our deadlines. I was invited as the tech lead to a meeting with my manager and the C-Level representatives. Before the meeting, my manager told me to lie that we were on track; otherwise, it would look bad for him that we were not meeting our target estimates
                                        . During the conversation, when one of the executives asked me point-blank about the likelihood of us not hitting the deadlines ‚Äî I told him straight that this was definitely a possibility and we should already start making arrangements for this scenario. After the meeting, my direct manager was fuming that I made him look bad, as if ‚Äúwe couldn‚Äôt deliver.‚Äù It was important for him to seem successful to the management rather than dealing with the realities of us missing the target and working transparently.
                                    
                                    üèÑ This dance with delusion is not limited to middle management. It can get as bad as the whole company leadership being afraid of showing how bad things really are and spinning up lies to seem successful to the board and investors, but that‚Äôs called fraud.
                                    Last but not least, established companies = comfy jobs = no desire to change the status quo = no innovation. Employees who WANT to disrupt the internal status quo get pushed down or pushed out. This aversion to change, coupled with resistance to disrupt the status quo, creates organizational debt. When employees are not given the possibility to influence their processes and the autonomy to make decisions ‚Äî they leave. Only those accepting the status quo remain, resulting in a bundle of ‚Äúcomfy‚Äù ineffective processes.
                                    Conclusion
                                    So here we are. The goal of this essay was to showcase that not only IT suffers from technical debt, but also the management suffers from organizational debt. Engineers' resistance to nonsensical processes highlights the need for transparent and well-communicated workflows. Leaders, such as yourself, must focus on refining and effectively communicating these processes to ensure they add value first and are comprehensible second, not vice versa. As a technical manager or a CTO, you‚Äôll have to work with other C-level executives to ensure the direction is clear and the processes make sense.
                                    Just as code requires refactoring, organizational structures and workflows also need regular evaluation and adjustment to maintain efficiency. 
                                    
                                        Other Newsletter
                                        Issues:
                                    
                                    
                                        
                                            Habits of great software engineers
                                        
                                        
                                            Networking as an introvert CTO
                                        
                                        
                                            Database Migrations
                                        
                                        
                                            Proper Documentation
                                        
                                    
                                    
                                        Reactions
                                        
                                        
                                            Hot!
                                            The last couple of years I've been writing about CTO / Tech lead job. I've compiled all my knowledge into a printable PDF. I called it "196 Pages of No Bullshit Guide for CTOs"
                                            . So if you're interested, take a look.

                                            
                                            New!
                                            If you're a software engineer looking for a job, I started a Roast my Resume
                                            service, where I record a personalized video of me "roasting" your CV, which basically means taking a hard look at your resume as a CTO and commenting on all the good and the bad parts.

                                        
                                    
                                ",
  "title": "Handling Process Debt in IT",
}
`;
